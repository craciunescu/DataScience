%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%



\documentclass[a4paper]{article}



\usepackage[utf8]{inputenc}

\usepackage[english]{babel}



\title{G4.P-1}

\author{David Emanuel Craciunescu \and Laura PÃ©rez Medeiro}



\begin{document}



\maketitle



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%



\section*{Introduction}



The main purpose of this introductory laboratorio practice is to get students

accustomed to the R development environment and to teach to these the basics of

data science with such environment and language.



Work-wise, the practice is divided in the two following parts:



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%



\subsection*{Development on provided dataset}



In this section, the student will have to formalize and develop on a provided

exercise and given dataset by the professor. This does not only enable the

professor to analyze if such student has completely and correctly understood the

contents of the laboratory practice, but it also serves as a starting point for

any student unable to face the workload of such project without any kind of

previous guidance or help.



This specific practice provides the dataset \textit{satelites.txt}, which

contains the \textbf{names} and \textbf{radii} of some of the most common moons

of Uranus. Working with this dataset has been thoroughly explained by the

professor in the almost three laboratory classes dedicated to this specific

practice, so an explanation or any kind of further analysis into this specific

dataset is considered not only redundant, but time-wasting as well.



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\subsection*{Development on obtained dataset}



This section of the laboratory practice aims to create a deeper understanding in

the nature of dataset retrieval by the students and to enhance their ability in

the labors of recognising good quality data sources and valid information

retrieval from the various analysis performed on these datasets.



The chosen data source for this exercise was scraped off the webpage

\textit{www.a-z-animals.com}, and the data itself was TODO.



<<>>=



while (!"satelites.txt" %in% list.files(getwd()))



{



print("Data file not found. Add \"satelites.txt\" to the current directory.")



invisible(readline(prompt="Press [enter] to continue"))



}







satelites <- read.table("satelites.txt")



satelites







radius <- satelites $radio



radius



@







It is important to take into account that the working directory must be the same to the file's



directory when read.table is going to be used. Otherwise, we must indicate the absolute route where



the file is.







After reading the data, different analyzes will be applied to those Uranus' moon radius:







a) Calculate absolute and relative satellite radius frequencies:







ABSOLUTE FRECUENCY:



<<>>= 



absoluteFreq <- function(set) {table(set)}



absoluteFreq(radius)



@



ACUMULATIVE ABSOLUTE FRECUENCY:



<<>>=



cumAbsoluteFreq <- function(set) {cumsum(absoluteFreq(set))}



cumAbsoluteFreq(radius)



@



RELATIVE FRECUENCY



<<>>=



relativeFreq <- function(set) {table(set) / length(set)}



relativeFreq(radius)



@



ACUMULATIVE RELATIVE FRECUENCY



<<>>=



cumRelativeFreq <- function(set) {cumsum(relativeFreq(set))}



cumRelativeFreq(radius)



@







b) Arithmetic mean



<<>>=



arithmeticMean <- function(set, usrTrim = 0) (mean(set, trim = usrTrim))



arithmeticMean(radius)



@







c) Measures of dispersion, where the following page was used as a reference for this section:



http://iridl.ldeo.columbia.edu/dochelp/StatTutorial/Dispersion/index.html#Intro







- RANGE:



<<>>=



range <- function(set) {max(set) - min(set)}



range(radius)



@



- STANDARD DEVIATION



<<>>=



stdDeviation <- function(set)



{



sd(set) * (sqrt((length(set) - 1) / length(set)))



}



stdDeviation(radius)



@



- VARIANCE:



<<>>=



variance <- function(set) {var(set) * (length(set) - 1 / length(set))}



variance(radius)



@



- ROOT MEAN SQUARE:



<<>>=



rootMeanSqr <- function(set) {sqrt(mean(set ^ 2))}



rootMeanSqr(radius)



@



- ROOT MEAN SQUARE ANOMALY:



<<>>=



rootMeanSqrAn <- function(set) {sqrt(sum(set - mean(set)) ^ 2) / length(set)}



rootMeanSqrAn(radius)



@



- INTERQUARTILE RANGE:



<<>>=



interQuartRange <- function(set) {IQR(set)}



interQuartRange(radius)



@



- MEDIAN ABSOLUTE DEVIATION



<<>>=



medAbsDeviation <- function(set) {mad(set)}



medAbsDeviation(radius)



@



d) Finally, measures of order:







-MEDIAN:



<<>>=



getMedian <- function(set) {median(set)}



getMedian(radius)



@



-MODE:



<<>>=



getMode <- function(set)



{



uniqueVal <- unique(set)



uniqueVal[which.max(tabulate(match(set, uniqueVal)))]



}



getMode(radius)



@



-QUARTILES:



<<>>=



getQuartiles <- function(set) {quantile(set)}



getQuartiles(radius)



@



-54th QUANTILE:



<<>>=



getQuantiles <- function(set, range = 0) {quantile(set, probs = range)}



getQuantiles(radius,54)



@







1.2 Now, the file will be "cardata.sav" where the same analyzes of data will be



applied to mpg. But this time, it is not necessary to calculate the 54th and the



frequencies.







It is necessary to import the foreign's library to read fata from SPSS files in R.



<<>>=



library(foreign)



@



Then, the file is read, only data related to mpg is load into the variable mpg



and we use a filter to delete all unusefull data and group then.



<<>>=



dataset = read.spss("cardata.sav", to.data.frame=TRUE)



mpg = dataset$mpg



mpg = mpg[!is.na(mpg)]





@







Now, data is ready to be analyzes so we can use the same functions as it has been used



in the previous section.









a) Arithmetic mean



<<>>=

arithmeticMean(mpg)

@







b) Measures of dispersion, where the following page was used as a reference for this section:



http://iridl.ldeo.columbia.edu/dochelp/StatTutorial/Dispersion/index.html#Intro







- RANGE:



<<>>=



range(mpg)



@



- STANDARD DEVIATION



<<>>=



stdDeviation(mpg)



@



- VARIANCE:



<<>>=



variance(mpg)



@



- ROOT MEAN SQUARE:



<<>>=



rootMeanSqr(mpg)



@



- ROOT MEAN SQUARE ANOMALY:



<<>>=



rootMeanSqrAn(mpg)



@



- INTERQUARTILE RANGE:



<<>>=



interQuartRange(mpg)



@



- MEDIAN ABSOLUTE DEVIATION



<<>>=



medAbsDeviation(mpg)



@



d) Finally, measures of order:







-MEDIAN:



<<>>=



getMedian(mpg)



@



-MODE:



<<>>=



getMode(mpg)



@




animals <- read.csv(head= T, sep=",", "animals2.csv" )



animals

lifespan <- animals $lifespan
lifespan

@







It is important to take into account that the working directory must be the same to the file's



directory when read.table is going to be used. Otherwise, we must indicate the absolute route where



the file is.







After reading the data, different analyzes will be applied to those Uranus' moon animals:







a) Calculate absolute and relative satellite animals frequencies:







ABSOLUTE FRECUENCY:



<<>>= 
absoluteFreq(lifespan)
@



ACUMULATIVE ABSOLUTE FRECUENCY:



<<>>=




cumAbsoluteFreq(lifespan)



@



RELATIVE FRECUENCY



<<>>=


relativeFreq(lifespan)



@



ACUMULATIVE RELATIVE FRECUENCY



<<>>=



cumRelativeFreq(lifespan)



@







b) Arithmetic mean



<<>>=



arithmeticMean(lifespan)



@







c) Measures of dispersion, where the following page was used as a reference for this section:



http://iridl.ldeo.columbia.edu/dochelp/StatTutorial/Dispersion/index.html#Intro







- RANGE:



<<>>=

range(lifespan)

@



- STANDARD DEVIATION



<<>>=


stdDeviation(lifespan)



@



- VARIANCE:



<<>>=



variance(lifespan)



@



- ROOT MEAN SQUARE:



<<>>=



rootMeanSqr(lifespan)



@



- ROOT MEAN SQUARE ANOMALY:



<<>>=




rootMeanSqrAn(lifespan)



@



- INTERQUARTILE RANGE:



<<>>=




interQuartRange(lifespan)



@



- MEDIAN ABSOLUTE DEVIATION



<<>>=



medAbsDeviation(lifespan)



@



d) Finally, measures of order:







-MEDIAN:



<<>>=




getMedian(lifespan)



@



-MODE:



<<>>=






getMode(lifespan)



@



-QUARTILES:



<<>>=



getQuartiles(lifespan)



@



-54th QUANTILE:



<<>>=



getQuantiles(lifespan,54)



@








\end{document}